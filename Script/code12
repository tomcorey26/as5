     //  Produce the name of the input file minus extension
     char* inputFileRootName = (char*) malloc(strlen(inputImagePath+k) +1);
     strcpy(inputFileRootName, inputImagePath+k);
     //  chop off the extension by replacing the dot by '\0'
     inputFileRootName[strlen(inputFileRootName)-4] = '\0';
     //  Append root name to output path, add the suffix and the file extension
     strcat(outFilePath, inputFileRootName);
     strcat(outFilePath, ROT_SUFFIX[rotVal]);
     strcat(outFilePath, ".tga");
     //  free heap-allocated data we don't need anymore
     free(inputFileRootName);
     
     return outFilePath;
 }
 ImageStruct copyImage(const ImageStruct* image)
 {
     ImageStruct outImage = newImage(image->width, image->height, RGBA32_RASTER, 4);
     memcpy( (char*) outImage.raster,
             (char*) image->raster,
             image->height * image->bytesPerRow);
     
     return outImage;
 }
 //  In a rotation by 90 degree clockwise, the pixel at row i, col j in the input image
 //  ends up at row outHeight - j - 1, col i in the output image
 ImageStruct rotateImage90(const ImageStruct* image)
 {
     ImageStruct outImage = newImage(image->height, image->width, RGBA32_RASTER, 4);
     const int* rasterIn = (int*)(image->raster);
     int* rasterOut = (int*)(outImage.raster);
     for (unsigned i=0; i<image->height; i++)
     {
         for (unsigned j=0; j<image->width; j++)
             rasterOut[(outImage.height-j-1)*outImage.width + i] =
             rasterIn[i*image->width + j];
     }
     return outImage;
 }
 //  In a rotation by 180 degree clockwise, the pixel at row i, col j in the input image
