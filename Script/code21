         case FLOAT_RASTER:
         img.bytesPerPixel = sizeof(float);
         break;
         
         default:
             break;
     }
     img.bytesPerRow = ((img.bytesPerPixel * width + wordSizeRowPadding - 1)/wordSizeRowPadding)*wordSizeRowPadding;
     unsigned int effectiveWidth = img.bytesPerRow / img.bytesPerPixel;  
     img.raster = (void*) calloc(height*effectiveWidth, img.bytesPerPixel);
     return img;
 }
 int extractCropRegion(const char* argv[],
                       unsigned int imageWidth, unsigned int imageHeight,
                       unsigned int* cropCornerX, unsigned int* cropCornerY,
                       unsigned int* cropWidth, unsigned int* cropHeight)
 {
     if (sscanf(argv[3], "%u", cropCornerX) != 1)
         errorReport(INVALID_CROP_X_TYPE, argv[3]);
     if (sscanf(argv[4], "%u", cropCornerY) != 1)
         errorReport(INVALID_CROP_Y_TYPE, argv[3]);
     //  Note: since we read into an unsigned int, a negative value would come out
     //  as a large positive value
     if ((*cropCornerX >= imageWidth) || (*cropCornerY >= imageHeight))
         errorReport(INVALID_CROP_CORNER, NULL);
     if (sscanf(argv[5], "%u", cropWidth) != 1)
         errorReport(INVALID_CROP_WIDTH_TYPE, argv[3]);
     if (sscanf(argv[6], "%u", cropHeight) != 1)
         errorReport(INVALID_CROP_HEIGHT_TYPE, argv[3]);
     //  Note: since we read into an unsigned int, a negative value would come out
     //  as a large positive value
     if ((*cropCornerX + *cropWidth >= imageWidth) ||
         (*cropCornerY + *cropHeight >= imageHeight))
         errorReport(INVALID_CROP_SIZE, NULL);
     
     //  Otherwise, all is ok, go back to crop
     return 0;
 }
 ImageStruct cropImage(ImageStruct *imageIn,
