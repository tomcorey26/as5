  *  @param  filePath    path to the file to write
  *  @param  info        pointer to the ImageStruct of the image to write into a .tga file.
  *  @return 1 if the image was read successfully, 0 otherwise.
  */
 int writeTGA(char* filePath, ImageStruct* info);
 /** Processes the rotation-specifying string to determine the
  *  rotation to apply.
  *  @param  rotStr  the rotation-specifying string in the form -[r|l]+
  *  @param  rotVal  pointer to a RotationVal enum variable
  *  @return an error code
  */
 ImageIOErrorCode determineRotation(const char* rotStr, RotationVal* rotVal);
 /** In this app, just prints out an error message to the console and
  *  exits with the proper error code.  In a fancier version, could
  *  write to a log and "swallow" some non-critical errors.
  *
  *  @param code     the code of the error to report/process
  *  @param input    the input string that caused the error (NULL otherwise)
  */
 void errorReport(ImageIOErrorCode code, const char* input);
 /** Produces a complete path to the output image file.
  *  If the input file path was ../../Images/clown and the 90-degree-rotated is to be
  *  written the output folder path is ../Output [with or without final slash),
  *  then the output file path will be ../Output/clown [r].tga
  *
  *  @param inputImagePath   path to the input image
  *  @param outFolderPath    path to the output folder
  *  @param rotVal           the rotation applied
  *  @return complete path to the desired output file.
  */
 char* produceOutFilePath(const char* inputImagePath, const char* outFolderPath,
                          RotationVal rotVal);
 /** interprets the program's input argument to determine the crop region.
  *  @param  argv    list of input argument to the program
  *  @param  cropCornerX     x coordinate of crop region's corner
  *  @param  cropCornerY     y coordinate of crop region's corner
  *  @param  cropWidth       crop region's width
  *  @param  cropHeight      crop region's height
  *  @return     an error code (0 if no error)
