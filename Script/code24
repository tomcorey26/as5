         {
             for (unsigned int i = nbRows-1, invI = 0; invI < nbRows; i--, invI++)
             {
                 unsigned index = 4*i*nbCols;
                 
                 for (unsigned j = 0; j < nbCols; j++)
                 {
                     char cRed, cGreen, cBlue;
                     fscanf(inPPM, "%c%c%c", &cRed, &cGreen, &cBlue);
                     //  for binary format I don't bother about the scaling
                     pixelData[index++] = (unsigned char) cRed;
                     pixelData[index++] = (unsigned char) cGreen;
                     pixelData[index++] = (unsigned char) cBlue;
                     pixelData[index++] = 0xFF;  //  alpha
                 }
             }
         }
         image.type = RGBA32_RASTER;
         image.bytesPerPixel = 4;
         image.bytesPerRow = 4*nbCols;
         image.raster = pixelData;
         //  Allocate raster2D
         unsigned char** r2D = (unsigned char**) calloc(nbRows, sizeof(unsigned char*));
         for (unsigned int i=0; i<nbRows; i++)
             r2D[i] = pixelData + i*image.bytesPerRow;
         image.raster2D = (void*) r2D;
     }
     else    //  kPGM
     {
         if (maxVal == 255)
         {
             //  Allocate the pixel array
             unsigned char* pixelData = (unsigned char*)calloc(nbCols*nbRows, 1);
             image.raster = pixelData;
             image.type = GRAY_RASTER;
             image.bytesPerPixel = 1;
             image.bytesPerRow = nbCols;
             //  Allocate raster2D
             unsigned char** r2D = (unsigned char**) calloc(nbRows, sizeof(unsigned char*));
