  */
 ImageStruct rotateImage270(const ImageStruct* image);
 #if 0
 #pragma mark -
 #pragma mark Function implementations
 #endif
 //--------------------------------------------------------------
 //  Main function, expecting as arguments:
 //        {rotation} inputImagePath outFolderPath
 //  e.g.    l ../Images/cells.tga ../Output
 //  It returns an error code (0 for no error)
 //--------------------------------------------------------------
 int main(int argc, const char* argv[])
 {
     //  we need at least one argument
     if (argc != 4)
         errorReport(WRONG_NUMBER_OF_ARGUMENTS, NULL);
     
     //  Just to look prettier in the code, I give meaningful names to my arguments
     const char* inputImagePath = argv[2];
     const char* outFolderPath = argv[3];
     //  Interpret the rotation argument
     RotationVal rot;
     int err = determineRotation(argv[1], &rot);
     if (err)
         errorReport(err, argv[1]);
     
     //  Read the image
     ImageStruct image = readTGA(inputImagePath);
     
     //  Produce the path to the output image
     char* outImagePath = produceOutFilePath(inputImagePath, outFolderPath, rot);
     
     //  The way my newImage function is set up (it returns an ImageStruct as value),
     //  I cannot separate declaration and initialization of my rotated image.
     //  It would be different if I was returning a pointer to a heap-allocated struct.
     //  That would get closer to "object-oriented C" in the sense that it would get
     //  fairly close to the behavior of
     //      Java:   ImageClass newImage;    //  reference to ImageClass object
