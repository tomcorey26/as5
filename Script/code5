 #pragma mark -
 #pragma mark Function prototypes
 #endif
 //  Reads the header of a PPM/PGM file
 char getHeaderInfoPPM_PGM_(FILE* inPPM, const char* filePath,
                            ImageFileType* fileType,
                            unsigned int* nbRows, unsigned int* nbCols,
                            unsigned int* maxVal);
 /** No-frills function that reads an image file in the <b>uncompressed</b>, un-commented PPM/PGM 
  *  (<tt>.ppm</tt> or <tt>.pgm</tt>) file format. If the image cannot be read (file not found, 
  *  invalid format, etc.) the function simply terminates execution.
  *  @param  filePath    path to the file to read
  *  @return  a properly initialized ImageStruct storing the image read
  */
 ImageStruct readPPM_PGM(const char* filePath);
 /** Writes an image file in the PPM/PGM (<tt>.ppm</tt> or <tt>.pgm</tt>) file format.
  *  @param  filePath    path to the file to write
  *  @param  img     pointer to the ImageStruct of the image to write into a .ppm or .pgm file.
  *  @return error code indicating whether the image was read successfully or not.
  */
 ImageIOErrorCode writePPM_PGM(const char* filePath, ImageStruct* img);
 /** returns a properly initialized ImageStruct (including the 1D raster).
  *  @param  width   number of columns of the image
  *  @param  height  number of rows of the image
  *  @param  type    one of RGBA32_RASTER, GRAY_RASTER, or FLOAT_RASTER
  *  @param  wordSizeRowPadding word size at which rows should be rounded up.
  *          You should use a padding size of 4 for a GRAY_RASTER raster
  *          if you intend to use OpenGL to render the image.
  */
 ImageStruct newImage(unsigned int width, unsigned int height, ImageType type,
                      unsigned int wordSizeRowPadding);
 /** No-frills function that reads an image file in the <b>uncompressed</b>, un-commented TARGA 
  *  (<tt>.tga</tt>) file format. If the image cannot be read (file not found, invalid format, etc.)
  *  the function simply terminates execution.
  *  @param  filePath    path to the file to read
  *  @return  a properly initialized ImageStruct storing the image read
  */
 ImageStruct readTGA(const char* filePath);
 /** Writes an image file in the <b>uncompressed</b>, un-commented TARGA (<tt>.tga</tt>) file format.
